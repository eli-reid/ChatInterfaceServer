
from .settings import DB as DB
from _typeshed import Incomplete
from typing import Generator

class DatabaseInterface(Incomplete):
    def __init__(self, *args, **kwargs) -> None: ...
    def insert(self, query: tuple): ...
    def fetchall(self, query: tuple): ...
    def fetchOne(self, query: tuple): ...
    def fetchallAsDict(self, query: tuple) -> list[dict[str, any]]: ...
    def update(self, query: str): ...

def dict_factory(cursor, row): ...
def DBConnect(db) -> Generator: ...

class Database:
    db: Incomplete
    def __init__(self) -> None: ...
    def __enter__(self) -> DatabaseInterface: ...
    def __exit__(self, type: type[BaseException] | None, value: BaseException | None, traceback: types.TracebackType | None) -> None: ...
